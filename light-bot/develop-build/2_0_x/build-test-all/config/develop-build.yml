workspace: developbuild_2_0_x
# indicate if you want to skip checkout. yes if you know that all repositories are just checkout
# or the last time the build was failed and you just want to retry without changing anything.
skip_checkout: false
# Just checkout the repositories for backup or some other tasks
skip_build: false
# If this value is set to true, then only checkout and build will be called. It is
# very useful if you just want to install the develop branch modules into your .m2
# local repo. Also, some of our customers have constraint test environment to run
# unit and integration test only and another environment to run all of tests.
skip_test: false
# skip copy file if necessary.
skip_copyFile: true
# skip copyWildcardFile
skip_copyWildcardFile: true
# skip start
skip_start: true

# Execute this set of tasks in order
# setup is called before any of the tasks
# teardown and stop are called regardless of a succesful/failed light-bot run
tasks:
  # one set of operations
  checkoutSetOne: checkout
  buildSetOne: build
  testProjects: test
  copyProjectFiles: copyFile
  copyWildcardFile: copyWildcardFile

checkout:
  checkoutSetOne:
    - branch: master
      skip: false
      repository:
      - git@github.com:networknt/light-4j.git
      - git@github.com:networknt/json-overlay.git
      - git@github.com:networknt/openapi-parser.git
      - git@github.com:networknt/light-rest-4j.git
      - git@github.com:networknt/light-graphql-4j.git
      - git@github.com:networknt/light-hybrid-4j.git
      - git@github.com:networknt/light-codegen.git
      - git@github.com:networknt/light-kafka.git
      - git@github.com:networknt/light-spa-4j.git
      - git@github.com:networknt/light-proxy.git
      - git@github.com:networknt/light-router.git
      - git@github.com:networknt/light-gateway.git
      # - git@github.com:networknt/light-oauth2.git
      - git@github.com:networknt/oauth-kafka.git
      - git@github.com:networknt/light-tokenization.git
      - git@github.com:networknt/light-reference.git
      - git@github.com:networknt/light-spring-boot.git
      - git@github.com:networknt/light-example-4j.git
      - git@github.com:networknt/light-config-server.git
      - git@github.com:networknt/light-aws-lambda.git
      - git@github.com:networknt/light-chaos-monkey.git
      - git@github.com:networknt/kafka-sidecar.git
      - git@github.com:networknt/http-sidecar.git
      - git@github.com:lightapi/light-portal.git
      - git@github.com:lightapi/hybrid-command.git
      - git@github.com:lightapi/hybrid-query.git
      - git@github.com:lightapi/market-command.git
      - git@github.com:lightapi/market-query.git
      - git@github.com:lightapi/user-query.git
      - git@github.com:lightapi/user-command.git
      - git@github.com:lightapi/ref-query.git
      - git@github.com:lightapi/ref-command.git
      - git@github.com:lightapi/event-exporter.git
      - git@github.com:lightapi/event-importer.git
      - git@github.com:networknt/light-scheduler.git
      - git@github.com:lightapi/maproot-command.git
      - git@github.com:lightapi/maproot-query.git

build:
  buildSetOne:
    skip: false
    project:
    - light-4j
    - json-overlay
    - openapi-parser
    - light-rest-4j
    - light-graphql-4j
    - light-hybrid-4j
    - light-codegen
    - light-kafka
    - light-spa-4j
    - light-aws-lambda
    - light-aws-lambda/jwt-authorizer/Authorizer
    - light-aws-lambda/ccc-lambda/middleware-function

    - light-proxy
    - light-router
    - light-gateway
    # - light-oauth2
    - oauth-kafka
    - light-tokenization
    - light-reference
    - light-spring-boot
    # - light-portal
    # - light-portal/api-certification
    # - light-portal/host-menu
    # - light-portal/schema-form
    # - light-portal/user-management
    # - light-portal/hybrid-command
    # - light-portal/hybrid-query
    # - http2client-benchmark/httpserver
    # - http2client-benchmark/lightclient
    # - microservices-framework-benchmark/light-4j
    # - light-config-server
    - light-example-4j/rest/petstore-maven-single
    - light-example-4j/rest/petstore-maven-multiple
    - light-example-4j/rest/openapi/proxy-backend
    - light-example-4j/rest/openapi/cors
    # - light-example-4j/rest/openapi/ms-aggregate/aa/generated
    # - light-example-4j/rest/openapi/ms-aggregate/aa/https
    # - light-example-4j/rest/openapi/ms-aggregate/ab/generated
    # - light-example-4j/rest/openapi/ms-aggregate/ab/https
    # - light-example-4j/rest/openapi/ms-aggregate/ac/generated
    # - light-example-4j/rest/openapi/ms-aggregate/ac/https
    # - light-example-4j/rest/openapi/ms-aggregate/ad/generated
    # - light-example-4j/rest/openapi/ms-aggregate/ad/https
    # - light-example-4j/rest/swagger/petstore
    # - light-example-4j/rest/swagger/proxy-backend
    # - light-example-4j/rest/swagger/ms_chain/api_a/httpschain
    # - light-example-4j/rest/swagger/ms_chain/api_b/httpschain
    # - light-example-4j/rest/swagger/ms_chain/api_c/httpschain
    # - light-example-4j/rest/swagger/ms_chain/api_d/httpschain
    # - light-example-4j/rest/swagger/database/generated
    # - light-example-4j/rest/swagger/database/connection
    # - light-example-4j/rest/swagger/database/oracle
    # - light-example-4j/rest/swagger/database/postgres
    # - light-example-4j/rest/swagger/database/queries
    # - light-example-4j/rest/swagger/database/query
    # - light-example-4j/rest/swagger/database/test
    # - light-example-4j/rest/swagger/database/updates
    # - light-example-4j/client/standalone
    # - light-example-4j/client/tomcat
    # - light-example-4j/client/consul
    # - light-example-4j/client/tableau
    # - light-example-4j/graphql/helloworld
    # - light-example-4j/graphql/starwars
    # - light-example-4j/graphql/mutation
    # - light-example-4j/graphql/mutation-idl
    # - light-example-4j/graphql/relaytodo
    # - light-example-4j/graphql/subscription
    # middleware-performance
    # - light-example-4j/middleware-performance/service-config
    # - light-example-4j/middleware-performance/endpoint-individual
    # - light-example-4j/middleware-performance/endpoint-source
    - light-chaos-monkey
    - kafka-sidecar
    - http-sidecar
    - light-portal
    - hybrid-command
    - hybrid-query
    - market-command
    - market-query
    - user-command
    - user-query
    - ref-command
    - ref-query
    - event-exporter
    - event-importer
    - light-scheduler
    - maproot-command
    - maproot-query

# This section defines end-to-end tests with real live servers, if you want to skip
# these tests, please change the same level skipE2ETest to true.
test:
  rest-petstore-maven-single:
    server:
    - path: light-example-4j/rest/petstore-maven-single
      cmd: target/server.jar
    request:
    - host: https://localhost:8443
      path: "/v1/pets/111"
      method: get
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.name": Jessica Right
          "$.id": 1
  rest-petstore-maven-multiple:
    server:
    - path: light-example-4j/rest/petstore-maven-multiple
      cmd: server/target/server.jar
    request:
    - host: https://localhost:8443
      path: "/v1/pets/111"
      method: get
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.name": Jessica Right
          "$.id": 1
  rest-openapi-proxy-backend:
    server:
    - path: light-example-4j/rest/openapi/proxy-backend
      cmd: target/backend-1.0.0.jar
    request:
    - host: https://localhost:8081
      path: "/v1/getData"
      method: get
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.enableHttp2": true
          "$.enableHttps": true
          "$.httpsPort": 8081
          "$.key": key1
          "$.value": value1
    - host: https://localhost:8081
      path: "/v1/postData"
      method: post
      header:
        "content-type": application/json
      body: "{\"key\":\"key1\",\"value\":\"value1\"}"
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.enableHttp2": true
          "$.enableHttps": true
          "$.httpsPort": 8081
          "$.key": key1
          "$.value": value1
  rest-openapi-cors:
    server:
    - path: light-example-4j/rest/openapi/cors
      cmd: target/cors-1.0.1.jar
    request:
    - host: https://localhost:8443
      path: "/v1/getData"
      method: get
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.[0].key": key1
          "$.[1].key": key2
          "$.[0].value": value1
          "$.[1].value": value2
    - host: https://localhost:8443
      path: "/v1/postData"
      method: post
      header:
        "content-type": application/json
      body: "{\"key\":\"key1\",\"value\":\"value1\"}"
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.key": key1
          "$.value": value1
    - host: https://localhost:8443
      path: "/v1/postData"
      method: options
      header:
        "Origin": http://example.com
        "Access-Control-Request-Method": POST
        "Access-Control-Request-Headers": X-Requested-With
      response:
        status: 200
  rest-openapi-aggregate:
    server:
    - path: light-example-4j/rest/openapi/ms-aggregate/ad/https
      cmd: target/ad-1.0.0.jar
    - path: light-example-4j/rest/openapi/ms-aggregate/ac/https
      cmd: target/ac-1.0.0.jar
    - path: light-example-4j/rest/openapi/ms-aggregate/ab/https
      cmd: target/ab-1.0.0.jar
    - path: light-example-4j/rest/openapi/ms-aggregate/aa/https
      cmd: target/aa-1.0.0.jar
    request:
    - host: https://localhost:7441
      path: "/v1/data"
      method: get
      response:
        status: 200
        body:
          "$.length()": 8
  rest-swagger-petstore:
    server:
    - path: light-example-4j/rest/swagger/petstore
      cmd: target/petstore-2.0.0.jar
    request:
    - host: https://localhost:8443
      path: "/v2/pet/111"
      method: get
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.name": doggie
          "$.id": 123456789
  rest-swagger-proxy-backend:
    server:
    - path: light-example-4j/rest/swagger/proxy-backend
      cmd: target/backend-1.0.0.jar
    request:
    - host: https://localhost:8081
      path: "/v1/getData"
      method: get
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.enableHttp2": true
          "$.enableHttps": true
          "$.httpsPort": 8081
          "$.key": key1
          "$.value": value1
    - host: https://localhost:8081
      path: "/v1/postData"
      method: post
      header:
        "content-type": application/json
      body: "{\"key\":\"key1\",\"value\":\"value1\"}"
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.enableHttp2": true
          "$.enableHttps": true
          "$.httpsPort": 8081
          "$.key": key1
          "$.value": value1
  rest-swagger-chain:
    server:
    - path: light-example-4j/rest/swagger/ms_chain/api_d/httpschain
      cmd: target/apid-1.0.0.jar
    - path: light-example-4j/rest/swagger/ms_chain/api_c/httpschain
      cmd: target/apic-1.0.0.jar
    - path: light-example-4j/rest/swagger/ms_chain/api_b/httpschain
      cmd: target/apib-1.0.0.jar
    - path: light-example-4j/rest/swagger/ms_chain/api_a/httpschain
      cmd: target/apia-1.0.0.jar
    request:
    - host: https://localhost:7441
      path: "/v1/data"
      method: get
      response:
        status: 200
        body:
          "$.length()": 8
  graphql-helloworld:
    server:
    - path: light-example-4j/graphql/helloworld
      cmd: target/starwars-1.0.1.jar
    request:
    - host: http://localhost:8080
      path: "/graphql"
      method: post
      header:
        "content-type": application/json
      body: "{\"query\":\"{ hello }\"}"
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.data.hello": world
  graphql-mutation:
    server:
    - path: light-example-4j/graphql/mutation
      cmd: target/starwars-1.0.1.jar
    request:
    # query
    - host: http://localhost:8081
      path: "/graphql"
      method: post
      header:
        "content-type": application/json
      body: "{\"query\":\"{ numberHolder { theNumber }}\"}"
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.data.numberHolder.theNumber": 6
    # mutation
    - host: http://localhost:8081
      path: "/graphql"
      method: post
      header:
        "content-type": application/json
      body: "{\"query\":\"mutation { changeTheNumber(newNumber: 4) { theNumber }}\"}"
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.data.changeTheNumber.theNumber": 4
    # query again
    - host: http://localhost:8081
      path: "/graphql"
      method: post
      header:
        "content-type": application/json
      body: "{\"query\":\"{ numberHolder { theNumber }}\"}"
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.data.numberHolder.theNumber": 4
    # subscription test has two browser windows and cannot be tested here.

  # dynamic port testing with two instances
  dynamic-port-petstore:
    server:
    - path: light-example-4j/rest/openapi/dyanmic-port
      cmd: target/petstore-3.0.1.jar
    - path: light-example-4j/rest/openapi/dyanmic-port
      cmd: target/petstore-3.0.1.jar
    request:
    - host: https://localhost:2400
      path: "/v1/pets/111"
      method: get
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.name": Jessica Right
          "$.id": 1
    - host: https://localhost:2401
      path: "/v1/pets/111"
      method: get
      response:
        status: 200
        header:
          content-type: application/json
        body:
          "$.name": Jessica Right
          "$.id": 1

# copy individual files
copyFile:

# copy wildcard files
copyWildcardFile:
