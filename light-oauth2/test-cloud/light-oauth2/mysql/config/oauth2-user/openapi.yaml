openapi: 3.0.0
info:
  version: 1.0.0
  title: OAuth2 User Service
  description: OAuth2 User Service microservices endpoints.
  contact:
    email: stevehu@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://oauth2.networknt.com'
paths:
  /oauth2/user:
    get:
      description: Return all users
      operationId: getAllUsers
      parameters:
        - name: page
          in: query
          description: Page number
          required: true
          schema:
            type: integer
            format: int32
        - name: pageSize
          in: query
          description: Pag size
          required: false
          schema:
            type: integer
            format: int32
        - name: userId
          in: query
          description: Partial userId for filter
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      security:
        - user_auth:
            - oauth.user.r
    post:
      description: Return a user object
      operationId: createUser
      responses:
        '200':
          description: Successful response
      security:
        - user_auth:
            - oauth.user.w
      requestBody:
        $ref: '#/components/requestBodies/User'
    put:
      description: Return the updated user
      operationId: updateUser
      responses:
        '200':
          description: Successful response
      security:
        - user_auth:
            - oauth.user.w
      requestBody:
        $ref: '#/components/requestBodies/User'
  '/oauth2/user/{userId}':
    delete:
      description: Delete a user by Id
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - oauth.user.w
    get:
      description: Get a user by Id
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid userId supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - oauth.user.r
            - oauth.user.w
  '/oauth2/password/{userId}':
    post:
      description: Reset Password
      operationId: resetPassword
      parameters:
        - name: userId
          in: path
          description: User Id
          required: true
          schema:
            type: string
      responses:
        '404':
          description: User not found
      security:
        - user_auth:
            - oauth.user.w
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
        description: Password object that needs to be added
        required: true
components:
  requestBodies:
    User:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
      description: User object that needs to be added
      required: true
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://localhost:8888/oauth2/code'
          scopes:
            oauth.user.w: write user
            oauth.user.r: read user
  schemas:
    User:
      type: object
      required:
        - userId
        - userType
        - firstName
        - lastName
        - email
      properties:
        userId:
          type: string
          description: a unique id
        userType:
          type: string
          description: user type
          enum:
            - admin
            - employee
            - customer
            - partner
        firstName:
          type: string
          description: first name
        lastName:
          type: string
          description: last name
        email:
          type: string
          description: email address
        password:
          type: string
          format: password
          description: password
        passwordConfirm:
          type: string
          format: password
          description: password confirm
        createDt:
          type: string
          format: date-time
          description: create date time
        updateDt:
          type: string
          format: date-time
          description: update date time
    Password:
      type: object
      required:
        - password
        - newPassword
        - newPasswordConfirm
      properties:
        password:
          type: string
          format: password
          description: existing password
        newPassword:
          type: string
          format: password
          description: new password
        newPasswordConfirm:
          type: string
          format: password
          description: new password confirm
