{"version":3,"sources":["components/ErrorMessage.js","App.js","serviceWorker.js","reducers/index.js","reducers/menuReducer.js","index.js"],"names":["useStyles","makeStyles","theme","error","color","ErrorMessage","props","classes","className","body","backgroundColor","palette","common","white","paper","marginTop","spacing","display","flexDirection","alignItems","avatar","margin","secondary","main","form","width","submit","App","search","window","location","params","URLSearchParams","useState","username","setUsername","password","setPassword","remember","setRemember","get","state","clientId","userType","redirectUri","setError","Container","component","maxWidth","CssBaseline","Avatar","Typography","variant","noValidate","onSubmit","event","console","log","preventDefault","data","j_username","j_password","client_id","user_type","redirect_uri","formData","Object","keys","map","key","encodeURIComponent","join","fetch","method","redirect","credentials","headers","then","response","ok","redirected","Error","statusText","href","url","catch","toString","TextField","required","fullWidth","id","label","name","value","autoComplete","autoFocus","onChange","e","target","type","FormControlLabel","control","Checkbox","Button","Boolean","hostname","match","combineReducers","menu","action","createMuiTheme","typography","useNextVariants","store","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUAGMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,MAAO,CACHC,MAAO,eAaAC,MATf,SAAsBC,GAClB,IAAMC,EAAUP,IAChB,OACI,yBAAKQ,UAAWD,EAAQJ,OACnBG,EAAMH,QCAbH,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrC,UAAW,CACTO,KAAM,CACJC,gBAAiBR,EAAMS,QAAQC,OAAOC,QAG1CC,MAAO,CACLC,UAAWb,EAAMc,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,OAAQ,CACNC,OAAQnB,EAAMc,QAAQ,GACtBN,gBAAiBR,EAAMS,QAAQW,UAAUC,MAE3CC,KAAM,CACJC,MAAO,OACPV,UAAWb,EAAMc,QAAQ,IAE3BU,OAAQ,CACNL,OAAQnB,EAAMc,QAAQ,EAAG,EAAG,QA2JjBW,MAtJf,WACE,IAAMpB,EAAUP,IAEZ4B,EAASC,OAAOC,SAASF,OACzBG,EAAS,IAAIC,gBAAgBJ,GAJpB,EAKmBK,mBAAS,IAL5B,mBAKNC,EALM,KAKIC,EALJ,OAMmBF,mBAAS,IAN5B,mBAMNG,EANM,KAMIC,EANJ,OAOmBJ,oBAAS,GAP5B,mBAONK,EAPM,KAOIC,EAPJ,OAQGN,mBAAgC,MAAvBF,EAAOS,IAAI,SAAmB,GAAKT,EAAOS,IAAI,UAAhEC,EARM,sBASMR,mBAAoC,MAA3BF,EAAOS,IAAI,aAAuB,GAAKT,EAAOS,IAAI,cAAvEE,EATM,sBAUMT,mBAAoC,MAA3BF,EAAOS,IAAI,aAAuB,GAAKT,EAAOS,IAAI,cAAvEG,EAVM,sBAWSV,mBAAuC,MAA9BF,EAAOS,IAAI,gBAA0B,GAAKT,EAAOS,IAAI,iBAA7EI,EAXM,sBAYaX,mBAAS,IAZtB,mBAYN9B,EAZM,KAYC0C,EAZD,KAoEb,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,OAAOC,SAAS,MACnC,kBAACC,EAAA,EAAD,MACA,yBAAKzC,UAAWD,EAAQO,OACtB,kBAACoC,EAAA,EAAD,CAAQ1C,UAAWD,EAAQa,QACzB,kBAAC,IAAD,OAEF,kBAAC+B,EAAA,EAAD,CAAYJ,UAAU,KAAKK,QAAQ,MAAnC,WAGA,kBAAC,EAAD,CAAcjD,MAAOA,IACrB,0BAAMK,UAAWD,EAAQiB,KAAM6B,YAAU,EAACC,SArD7B,SAAAC,GACnBC,QAAQC,IAAI,cAAgBvB,EAAW,eAAiBE,EAAW,eAAiBE,GACpFkB,QAAQC,IAAI,WAAahB,EAAQ,eAAiBC,EAAW,eAAiBC,EAAW,kBAAoBC,GAC7GW,EAAMG,iBAEN,IAAIC,EAAO,CACTC,WAAY1B,EACZ2B,WAAYzB,EACZK,MAAOA,EACPqB,UAAWpB,EACXqB,UAAWpB,EACXqB,aAAcpB,GAGVqB,EAAWC,OAAOC,KAAKR,GAAMS,KAAI,SAAAC,GAAG,OAAIC,mBAAmBD,GAAO,IAAMC,mBAAmBX,EAAKU,OAAOE,KAAK,KAElHf,QAAQC,IAAIQ,GAEZO,MAAM,eAAgB,CACpBC,OAAQ,OACRC,SAAU,SACVC,YAAa,UACbC,QAAS,CACP,eAAgB,qCAElBnE,KAAMwD,IAEPY,MAAK,SAAAC,GAEJ,IAAIA,EAASC,KAAMD,EAASE,WAG1B,MAAMC,MAAMH,EAASI,YAFrBrD,OAAOC,SAASqD,KAAOL,EAASM,OAKnCC,OAAM,SAAAlF,GACHqD,QAAQC,IAAI,SAAUtD,GACtB0C,EAAS1C,EAAMmF,iBAiBX,kBAACC,EAAA,EAAD,CACInC,QAAQ,WACR/B,OAAO,SACPmE,UAAQ,EACRC,WAAS,EACTC,GAAG,aACHC,MAAM,UACNC,KAAK,aACLC,MAAO3D,EACP4D,aAAa,WACbC,WAAS,EACTC,SA7Ee,SAAAC,GAC3B9D,EAAY8D,EAAEC,OAAOL,UA8Eb,kBAACN,EAAA,EAAD,CACInC,QAAQ,WACR/B,OAAO,SACPmE,UAAQ,EACRC,WAAS,EACTG,KAAK,aACLC,MAAOzD,EACPuD,MAAM,WACNQ,KAAK,WACLT,GAAG,aACHI,aAAa,WACbE,SAtFe,SAAAC,GAC3B5D,EAAY4D,EAAEC,OAAOL,UAuFb,kBAACN,EAAA,EAAD,CACIK,KAAK,QACLC,MAAOpD,EACP0D,KAAK,SACLT,GAAG,UAEP,kBAACH,EAAA,EAAD,CACIK,KAAK,YACLC,MAAOnD,EACPyD,KAAK,SACLT,GAAG,cAEP,kBAACH,EAAA,EAAD,CACIK,KAAK,YACLC,MAAOlD,EACPwD,KAAK,SACLT,GAAG,cAEP,kBAACH,EAAA,EAAD,CACIK,KAAK,eACLC,MAAOjD,EACPuD,KAAK,SACLT,GAAG,iBAEP,kBAACU,EAAA,EAAD,CACIC,QAAS,kBAACC,EAAA,EAAD,CAAUT,MAAM,WAAWzF,MAAM,YAC1CuF,MAAM,cACNK,SA/Ge,SAAAC,GAC3B1D,EAAY0D,EAAEC,OAAOL,UAgHb,kBAACU,EAAA,EAAD,CACIJ,KAAK,SACLV,WAAS,EACTrC,QAAQ,YACRhD,MAAM,UACNI,UAAWD,EAAQmB,QALvB,eClKQ8E,QACW,cAA7B3E,OAAOC,SAAS2E,UAEe,UAA7B5E,OAAOC,SAAS2E,UAEhB5E,OAAOC,SAAS2E,SAASC,MACvB,2D,oBCfSC,cAAgB,CAC3BC,KCJW,WAA8B,IAArBnE,EAAoB,uDAAZ,GAAIoE,EAAQ,uCAGhC,OAFAA,EAAOV,KAEA1D,K,0CCSbvC,EAAQ4G,YAAe,CACzBC,WAAY,CACRC,iBAAiB,KAInBC,EAAQC,YAAYC,EAAaC,YAAgBC,IAAOC,MAE9DC,IAASC,OACL,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,IAAD,CAAkB/G,MAAOA,GACrB,kBAAC,EAAD,QAGRuH,SAASC,eAAe,SHyGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.4e55a631.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n    error: {\n        color: '#ff0000',\n    },\n}));\n\nfunction ErrorMessage(props) {\n    const classes = useStyles();\n    return (\n        <div className={classes.error}>\n            {props.error}\n        </div>\n    )\n}\n\nexport default ErrorMessage;\n","import React, {useState} from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport ErrorMessage from './components/ErrorMessage';\n\nconst useStyles = makeStyles(theme => ({\n  '@global': {\n    body: {\n      backgroundColor: theme.palette.common.white,\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n\nfunction App() {\n  const classes = useStyles();\n\n  let search = window.location.search;\n  let params = new URLSearchParams(search);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [remember, setRemember] = useState(false);\n  const [state] = useState(params.get('state') == null ? '' : params.get('state'));\n  const [clientId] = useState(params.get('client_id') == null ? '' : params.get('client_id'));\n  const [userType] = useState(params.get('user_type') == null ? '' : params.get('user_type'));\n  const [redirectUri] = useState(params.get('redirect_uri') == null ? '' : params.get('redirect_uri'));\n  const [error, setError] = useState('');\n\n  const handleChangeUsername = e => {\n    setUsername(e.target.value)\n  };\n\n  const handleChangePassword = e => {\n    setPassword(e.target.value)\n  };\n\n  const handleChangeRemember = e => {\n    setRemember(e.target.value)\n  };\n\n  const handleSubmit = event => {\n    console.log(\"username = \" + username + \" password = \" + password + \" remember = \" + remember);\n    console.log(\"state = \" + state + \" clientId = \" + clientId + \" userType = \" + userType + \" redirectUri = \" + redirectUri);\n    event.preventDefault();\n\n    let data = {\n      j_username: username,\n      j_password: password,\n      state: state,\n      client_id: clientId,\n      user_type: userType,\n      redirect_uri: redirectUri\n    };\n\n    const formData = Object.keys(data).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(data[key])).join('&');\n\n    console.log(formData);\n\n    fetch(\"/oauth2/code\", {\n      method: 'POST',\n      redirect: 'follow',\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n      },\n      body: formData\n    })\n    .then(response => {\n      // HTTP redirect.\n      if (response.ok && response.redirected) {\n        window.location.href = response.url;\n      } else {\n        throw Error(response.statusText);\n      }\n    })\n    .catch(error => {\n        console.log(\"error=\", error);\n        setError(error.toString());\n    });\n  };\n\n\n  return (\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n          </Typography>\n          <ErrorMessage error={error}/>\n          <form className={classes.form} noValidate onSubmit={handleSubmit}>\n            <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                id=\"j_username\"\n                label=\"User Id\"\n                name=\"j_username\"\n                value={username}\n                autoComplete=\"username\"\n                autoFocus\n                onChange={handleChangeUsername}\n            />\n            <TextField\n                variant=\"outlined\"\n                margin=\"normal\"\n                required\n                fullWidth\n                name=\"j_password\"\n                value={password}\n                label=\"Password\"\n                type=\"password\"\n                id=\"j_password\"\n                autoComplete=\"password\"\n                onChange={handleChangePassword}\n            />\n            <TextField\n                name=\"state\"\n                value={state}\n                type=\"hidden\"\n                id=\"state\"\n            />\n            <TextField\n                name=\"client_id\"\n                value={clientId}\n                type=\"hidden\"\n                id=\"client_id\"\n            />\n            <TextField\n                name=\"user_type\"\n                value={userType}\n                type=\"hidden\"\n                id=\"user_type\"\n            />\n            <TextField\n                name=\"redirect_uri\"\n                value={redirectUri}\n                type=\"hidden\"\n                id=\"redirect_uri\"\n            />\n            <FormControlLabel\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\n                label=\"Remember me\"\n                onChange={handleChangeRemember}\n            />\n            <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                className={classes.submit}\n            >\n              Sign In\n            </Button>\n          </form>\n        </div>\n      </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport menuReducer from './menuReducer';\n\nexport default combineReducers({\n    menu: menuReducer\n});\n","export default function(state = [], action) {\n    switch (action.type) {\n        default:\n            return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport rootReducer from './reducers';\nimport thunk from 'redux-thunk';\nimport logger from 'redux-logger';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\n\nconst theme = createMuiTheme({\n    typography: {\n        useNextVariants: true,\n    },\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <MuiThemeProvider theme={theme}>\n            <App />\n        </MuiThemeProvider>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
